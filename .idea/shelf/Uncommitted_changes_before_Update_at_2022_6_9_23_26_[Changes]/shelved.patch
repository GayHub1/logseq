Index: pages/Elasticsearch 安装与入门.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>- ### ELK安装\r\n\t- [[ELK Windows安装]]\r\n\t- [[ELK docker-compose 安装]]\r\n\t- [[报错]]\r\n- ### 安装与查看插件\r\n\t- 查看插件\r\n\t  ```\r\n\t  \t  .\\bin\\elasticsearch-plugin list\r\n\t  ```\r\n\t  安装插件\r\n\t  ```\r\n\t  \t  .\\bin\\elasticsearch-plugin install analysis-icu\r\n\t  ```\r\n\t- Kibana 相关插件 https://www.elastic.co/guide/en/kibana/current/known-plugins.html\r\n- ## 基本概念\r\n\t- 与关系型数据库简单对比\r\n\t  \r\n\t  | RDBMS | Elasticsearch |\r\n\t  |---|---|\r\n\t  | Table | Index(Type) |\r\n\t  | Row | Document |\r\n\t  | Column | Filed |\r\n\t  | Schema | Mapping |\r\n\t  | SQL | DSL |\r\n- ### 文档\r\n\t- Elasticsearch 是面向文档的，文档是所有可搜索数据的最小单位\r\n\t- 文档会被序列化成JSON格式，保存在Elasticsearch中\r\n\t- 每个文档都有一个Unique ID\r\n\t- RESTAPI\r\n\t\t- 创建文档\r\n\t\t\t- 指定id存在时就报错\r\n\t\t\t- ```\r\n\t\t\t  \t\t\t  PUT users/_create/1\r\n\t\t\t  \t\t\t  {\r\n\t\t\t  \t\t\t      \"user\" : \"Jack\",\r\n\t\t\t  \t\t\t      \"post_date\" : \"2019-05-15T14:12:12\",\r\n\t\t\t  \t\t\t      \"message\" : \"trying out Elasticsearch\"\r\n\t\t\t  \t\t\t  }\r\n\t\t\t  ```\r\n\t\t\t- 指定id存在时就更新\r\n\t\t\t- ```\r\n\t\t\t  \t\t\t  POST users/_doc\r\n\t\t\t  \t\t\t  {\r\n\t\t\t  \t\t\t  \t\"user\" : \"Mike\",\t\r\n\t\t\t  \t\t\t      \"post_date\" : \"2019-04-15T14:12:12\",\r\n\t\t\t  \t\t\t      \"message\" : \"trying out Kibana\"\r\n\t\t\t  \t\t\t  }\t\r\n\t\t\t  ```\r\n\t\t\t- ```\r\n\t\t\t  \t\t\t  POST users/_doc/1\r\n\t\t\t  \t\t\t  {\r\n\t\t\t  \t\t\t  \t\"user\" : \"Mike\",\t\r\n\t\t\t  \t\t\t      \"post_date\" : \"2019-04-15T14:12:12\",\r\n\t\t\t  \t\t\t      \"message\" : \"trying out Kibana\"\r\n\t\t\t  \t\t\t  }\r\n\t\t\t  ```\r\n\t\t- 获取文档\r\n\t\t\t- `GET users/_doc/1`\r\n\t\t- 删除文档\r\n\t\t\t- `DELETE users/_doc/1`\r\n\t\t- 批量操作\r\n\t\t\t- bulk\r\n\t\t\t\t- ```\r\n\t\t\t\t  \t\t\t\t  POST _bulk\r\n\t\t\t\t  \t\t\t\t  {\"index\":{\"_index\":\"test\",\"_id\":\"1\"}}\r\n\t\t\t\t  \t\t\t\t  {\"field1\":\"value1\"}\r\n\t\t\t\t  \t\t\t\t  {\"delete\":{\"_index\":\"test\",\"_id\":\"2\"}}\r\n\t\t\t\t  \t\t\t\t  {\"create\":{\"_index\":\"test2\",\"_id\":\"3\"}}\r\n\t\t\t\t  \t\t\t\t  {\"field1\":\"value3\"}\r\n\t\t\t\t  \t\t\t\t  {\"update\":{\"_id\":\"1\",\"_index\":\"test\"}}\r\n\t\t\t\t  \t\t\t\t  {\"doc\":{\"field2\":\"value2\"}}\r\n\t\t\t\t  ```\r\n\t\t\t- mget\r\n\t\t\t\t- ```\r\n\t\t\t\t  \t\t\t\t  GET /_mget\r\n\t\t\t\t  \t\t\t\t  {\r\n\t\t\t\t  \t\t\t\t      \"docs\" : [\r\n\t\t\t\t  \t\t\t\t          {\r\n\t\t\t\t  \t\t\t\t              \"_index\" : \"test\",\r\n\t\t\t\t  \t\t\t\t              \"_id\" : \"1\",\r\n\t\t\t\t  \t\t\t\t              \"_source\" : false\r\n\t\t\t\t  \t\t\t\t          },\r\n\t\t\t\t  \t\t\t\t          {\r\n\t\t\t\t  \t\t\t\t              \"_index\" : \"test\",\r\n\t\t\t\t  \t\t\t\t              \"_id\" : \"2\",\r\n\t\t\t\t  \t\t\t\t              \"_source\" : [\"field3\", \"field4\"]\r\n\t\t\t\t  \t\t\t\t          },\r\n\t\t\t\t  \t\t\t\t          {\r\n\t\t\t\t  \t\t\t\t              \"_index\" : \"test\",\r\n\t\t\t\t  \t\t\t\t              \"_id\" : \"3\",\r\n\t\t\t\t  \t\t\t\t              \"_source\" : {\r\n\t\t\t\t  \t\t\t\t                  \"include\": [\"user\"],\r\n\t\t\t\t  \t\t\t\t                  \"exclude\": [\"user.location\"]\r\n\t\t\t\t  \t\t\t\t              }\r\n\t\t\t\t  \t\t\t\t          }\r\n\t\t\t\t  \t\t\t\t      ]\r\n\t\t\t\t  \t\t\t\t  }\r\n\t\t\t\t  ```\r\n\t\t\t- msearch\r\n\t\t\t\t- ```\r\n\t\t\t\t  \t\t\t\t  POST kibana_sample_data_ecommerce/_msearch\r\n\t\t\t\t  \t\t\t\t  {}\r\n\t\t\t\t  \t\t\t\t  {\"query\" : {\"match_all\" : {}},\"size\":1}\r\n\t\t\t\t  \t\t\t\t  {\"index\" : \"kibana_sample_data_flights\"}\r\n\t\t\t\t  \t\t\t\t  {\"query\" : {\"match_all\" : {}},\"size\":2}\r\n\t\t\t\t  ```\r\n\t\t-\r\n\t-\r\n- ### 索引\r\n\t- Index - 索引是文档的容器，是一类文档的结合\r\n\t\t- Index体现了逻辑空间的概念：每个索引都有自己的Mapping定义，用于定义包含的文档的字段名和字段类型\r\n\t\t- Shard体现了物理空间的概念：索引中的数据分散在Shard上\r\n\t- 索引的 Mapping 与 Settings\r\n\t\t- Mapping 定义文档字段的类型\r\n\t\t- Setting 定义不同的数据分布\r\n\t- RESTAPI\r\n\t\t- 查看索引相关信息\r\n\t\t  `GET kibana_sample_data_ecommerce`\r\n\t\t- 查看索引的文档总数\r\n\t\t  `GET kibana_sample_data_ecommerce/_count`\r\n\t\t- 查看节点**indices**状态(查看集群中该索引情况)\r\n\t\t  `GET /_cat/indices/kibana*?v&s=index`\r\n\t\t- 查看状态为绿的索引\r\n\t\t  `GET /_cat/indices?v&health=green`\r\n\t\t- 查看具体的字段\r\n\t\t  `GET /_cat/indices/kibana*?pri&v&h=health,index,pri,rep,docs.count,mt`\r\n\t\t- 索引具体内容使用情况\r\n\t\t  GET /_cat/indices?v&h=i,tm&s=tm:desc\r\n- ### 节点\r\n\t- #### Master-eligible nodes 和 Master Node\r\n\t\t- 每个节点启动后，默认就是一个Master eligible节点\r\n\t\t\t- 可以设置node.master:false禁止\r\n\t\t- Master-eligible节点可以参加选主流程，成为Master节点\r\n\t\t- 当第一个节点启动时候，它会将自己选举成Master节点\r\n\t\t- 每个节点上都保存了集群的状态，只有Master节点才能修改集群的状态信息\r\n\t\t\t- 集群状态（Cluster State),维护了一个集群中，必要的信息\r\n\t\t\t\t- 所有的节点信息\r\n\t\t\t\t- 所有的索引和其相关的Mapping与Setting信息\r\n\t\t\t\t- 分片的路由信息\r\n\t- #### Data Node & Coordinating Node\r\n\t  Data Node\r\n\t\t- 可以保存数据的节点，叫做Data Node。负责保存分片数据。在数据扩展上起到了\r\n\t\t  至关重要的作用\r\n\t\t- Coordinating Node\r\n\t\t\t- 负责接受Client的请求，将请求分发到合适的节点，最终把结果汇集到一起\r\n\t\t\t- 每个节点默认都起到了Coordinating Node的职责\r\n\t- #### Hot & Warm Node\r\n\t\t- 不同硬件配置的Data Node,用来实现Hot&Warm架构，降低集群部署的成本\r\n\t- #### Machine Learning Node\r\n\t\t- 负责跑机器学习的Job,用来做异常检测\r\n\t- #### Tribe Node\r\n\t\t- Tribe Node连接到不同的Elasticsearch集群，并且支持将这些集群当成一个单独的集群处理5.3开始使用Cross Cluster Serarch)\r\n\t- RESTAPI\r\n\t- 列出所有node 以及node节点机器状态\r\n\t  `GET /_cat/nodes?v`\r\n\t- | ip | heap.percent | ram.percent | cpu | load_1m | load_5m | load_15m | node.role | master | name |\r\n\t  |---|---|---|---|---|---|---|---|---|---|\r\n\t  | 10.42.4.198 | 33 | 64 | 3 | 1.82 | 1.81 | 1.43 | himrst | - | instance-0000000001 |\r\n\t  | 10.42.6.65 | 49 | 66 | 3 | 1.69 | 1.78 | 1.62 | himrst | * | instance-0000000000 |\r\n\t  | 10.42.5.59 | 70 | 82 | 0 | 1.47 | 2.18 | 2.59 | mv | - | tiebreaker-0000000002 |\r\n\t  \t\t* **heap.percent** 堆内存占用百分比\r\n\t  \t\t* **ram.percent** 内存占用百分比\r\n\t  \t\t* **cpu** CPU占用百分比\r\n\t  \t\t* **master** *表示节点是集群中的主节点\r\n\t  \t\t* **name** 节点名\r\n\t- `GET /_cat/nodes?v&h=id,ip,port,v,m`\r\n\t-\r\n\t-\r\n- ### 集群\r\n  :logbook:\r\n  CLOCK: [2022-05-28 Sat 21:28:06]--[2022-05-28 Sat 21:28:07] =>  00:00:01\r\n  :END:\r\n\t- 不同的集群通过不同的名字来区分，默认名字“elasticsearch”\r\n\t- 通过配置文件修改，或者在命令行中-E cluster.name=geektime进行设定\r\n\t  一个集群可以有一个或者多个节点\r\n\t- RESTAPI\r\n\t\t- 查看集群健康情况\r\n\t\t- ```\r\n\t\t  \t\t  GET _cluster/health\r\n\t\t  \t\t  GET _cluster/health?level=shards\r\n\t\t  \t\t  GET /_cluster/health/kibana_sample_data_ecommerce,kibana_sample_data_flights\r\n\t\t  \t\t  GET /_cluster/health/kibana_sample_data_flights?level=shards\r\n\t\t  ```\r\n\t\t- ![image.png](../assets/image_1653748056183_0.png)\r\n\t-\r\n- ### 分片\r\n\t- 主分片(Primary Shard )，用以解决数据水平扩展的问题。通过主分片，可以将数据分布到集群内的所有节点之上\r\n\t\t- 一个分片是一个运行的Lucene的实例\r\n\t\t- 主分片数在索引创建时指定，后续不允许修改，除非Reindex\r\n\t- ·副本(Replica Shard)，用以解决数据高可用的问题。分片是主分片的拷贝\r\n\t\t- 副本分片数，可以动态题调整\r\n\t\t- 增加副本数，还可以在一定程度上提高服务的可用性（读取的吞吐）\r\n\t- 对于生产环境中分片的设定，需要提前做好容量规划\r\n\t\t- 分片数设置过小\r\n\t\t\t- 导致后续无法增加节点实现水品扩展\r\n\t\t\t- 单个分片的数据量太大，导致数据重新分配耗时\r\n\t\t- 分片数设置过大，7.0开始，默认主分片设置成1,解决了over-sharding的问题\r\n\t\t\t- 影响搜索结果的相关性打分，影响统计结果的准确性\r\n\t\t\t- 单个节点上过多的分片，会导致资源浪费，同时也会影响性能\r\n\t- RESTAPI\r\n\t- ```\r\n\t  \t  GET _cat/shards\r\n\t  \t  GET _cat/shards?h=index,shard,prirep,state,unassigned.reason\r\n\t  ```\r\n\t-\r\n- ### 倒排索引\r\n\t- 单词词典（Term Dictionary),记录所有文档的单词，记录单词到倒排列表的关联关系\r\n\t\t- 单词词典一般比较大，可以通过B+树或哈希拉链法实现，以满足高性能的插入与查询\r\n\t- 倒排列表（Posting List)-记录了单词对应的文档结合，由倒排索引项组成\r\n\t\t- 倒排索引项（Posting)\r\n\t\t\t- 文档ID\r\n\t\t\t- 词频TF-该单词在文档中出现的次数，用于相关性评分\r\n\t\t\t- 位置（Position)-单词在文档中分词的位置。用于语句搜索（phrase query\r\n\t\t\t- 偏移（Offset)-记录单词的开始结束位置，实现高亮显示\r\n\t\t\t  ![image-20220504182115226](https://cdn.jsdelivr.net/gh/GayHub1/images@master/img/image-20220504182115226.png)\r\n\t-\r\n\t\t- ```\r\n\t\t  \t\t  POST _analyze\r\n\t\t  \t\t  {\r\n\t\t  \t\t    \"analyzer\": \"standard\",\r\n\t\t  \t\t    \"text\": \"Mastering Elasticsearch\"\r\n\t\t  \t\t  }\r\n\t\t  ```\r\n\t\t-\r\n- ### 分词器\r\n\t- 常见分词器\r\n\t  \r\n\t  | 名称 | 作用 |\r\n\t  |---|---|\r\n\t  | Simple Analyzer | 按照非字母切分（符号被过滤），小写处理 |\r\n\t  | Stop Analyzer | 小写处理，停用词过滤（the，a，is） |\r\n\t  | Whitespace Analyzer | 按照空格切分，不转小写 |\r\n\t  | Patter Analyze | 正则表达式，默认 W+ (非字符分隔) |\r\n\t  | Keyword Analyzer | 不分词，直接将输入当作输出 |\r\n\t  | Language | 提供了30多种常见语言的分词器 |\r\n\t  | [IK]( https://github.com/medcl/elasticsearch-analysis-ik) | 支持自定义词库，支持热更新分词字典 |\r\n\t  | [THULAC](https://github.com/microbun/elasticsearch-thulac-plugin) | THU Lexucal Analyzer for Chinese,清华大学自然语言处理和社会人文计算实验室的一套中文分词器 |\r\n\t  **安装**\r\n\t  \r\n\t  \t\t1. 将[IK分词器压缩包]( https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.1.0/elasticsearch-analysis-ik-7.1.0.zip)映射进容器内/usr/share/elasticsearch/plugins目录下，修改在docker-compose文件，在**volumes**下添加\r\n\t   `` ./ELKConfig/elasticsearch/plugins:/usr/share/elasticsearch/plugins #插件文件挂载``\r\n\t  \t\t2. 也可以容器内命令安装\r\n\t   ```\r\n\t   ./bin/elasticsearch-plugin install  https://github.com/medcl/elasticsearch-analysis-ik/releases/downlo\r\n\t   ad/v7.1.0/elasticsearch-analysis-ik-7.1.0.zip\r\n\t   ```\r\n\t  3. 重启所有es容器\r\n\t  4. 访问http://127.0.0.1:9200/_cat/plugins 查看插件是否被加载进去\r\n\t    ![image-20220504213020492](C:\\Users\\94241\\AppData\\Roaming\\Typora\\typora-user-images\\image-20220504213020492.png)\r\n\t    测试\r\n\t    ```\r\n\t    POST _analyze\r\n\t    {\r\n\t    \"analyzer\": \"ik_smart\",\r\n\t    \"text\": \"这个苹果不大好吃\"\r\n\t    }\r\n\t    ```\r\n\t    如果安装插件后重启容器失败，可以将插件压缩包解压到plugins文件夹下ik文件夹\r\n\t- **RESTAPI**\r\n\t\t- ```\r\n\t\t  \t\t  #Simple Analyzer – 按照非字母切分（符号被过滤），小写处理\r\n\t\t  \t\t  #Stop Analyzer – 小写处理，停用词过滤（the，a，is）\r\n\t\t  \t\t  #Whitespace Analyzer – 按照空格切分，不转小写\r\n\t\t  \t\t  #Keyword Analyzer – 不分词，直接将输入当作输出\r\n\t\t  \t\t  #Patter Analyzer – 正则表达式，默认 \\W+ (非字符分隔)\r\n\t\t  \t\t  #Language – 提供了30多种常见语言的分词器\r\n\t\t  \t\t  #2 running Quick brown-foxes leap over lazy dogs in the summer evening\r\n\t\t  \t\t  \r\n\t\t  \t\t  #查看不同的analyzer的效果\r\n\t\t  \t\t  #standard\r\n\t\t  \t\t  GET _analyze\r\n\t\t  \t\t  {\r\n\t\t  \t\t    \"analyzer\": \"standard\",\r\n\t\t  \t\t    \"text\": \"2 running Quick brown-foxes leap over lazy dogs in the summer evening.\"\r\n\t\t  \t\t  }\r\n\t\t  \t\t  \r\n\t\t  \t\t  #simpe\r\n\t\t  \t\t  GET _analyze\r\n\t\t  \t\t  {\r\n\t\t  \t\t    \"analyzer\": \"simple\",\r\n\t\t  \t\t    \"text\": \"2 running Quick brown-foxes leap over lazy dogs in the summer evening.\"\r\n\t\t  \t\t  }\r\n\t\t  \t\t  \r\n\t\t  \t\t  \r\n\t\t  \t\t  GET _analyze\r\n\t\t  \t\t  {\r\n\t\t  \t\t    \"analyzer\": \"stop\",\r\n\t\t  \t\t    \"text\": \"2 running Quick brown-foxes leap over lazy dogs in the summer evening.\"\r\n\t\t  \t\t  }\r\n\t\t  \t\t  \r\n\t\t  \t\t  \r\n\t\t  \t\t  #stop\r\n\t\t  \t\t  GET _analyze\r\n\t\t  \t\t  {\r\n\t\t  \t\t    \"analyzer\": \"whitespace\",\r\n\t\t  \t\t    \"text\": \"2 running Quick brown-foxes leap over lazy dogs in the summer evening.\"\r\n\t\t  \t\t  }\r\n\t\t  \t\t  \r\n\t\t  \t\t  #keyword\r\n\t\t  \t\t  GET _analyze\r\n\t\t  \t\t  {\r\n\t\t  \t\t    \"analyzer\": \"keyword\",\r\n\t\t  \t\t    \"text\": \"2 running Quick brown-foxes leap over lazy dogs in the summer evening.\"\r\n\t\t  \t\t  }\r\n\t\t  \t\t  \r\n\t\t  \t\t  GET _analyze\r\n\t\t  \t\t  {\r\n\t\t  \t\t    \"analyzer\": \"pattern\",\r\n\t\t  \t\t    \"text\": \"2 running Quick brown-foxes leap over lazy dogs in the summer evening.\"\r\n\t\t  \t\t  }\r\n\t\t  \t\t  \r\n\t\t  \t\t  \r\n\t\t  \t\t  #english\r\n\t\t  \t\t  GET _analyze\r\n\t\t  \t\t  {\r\n\t\t  \t\t    \"analyzer\": \"english\",\r\n\t\t  \t\t    \"text\": \"2 running Quick brown-foxes leap over lazy dogs in the summer evening.\"\r\n\t\t  \t\t  }\r\n\t\t  \t\t  \r\n\t\t  \t\t  \r\n\t\t  \t\t  POST _analyze\r\n\t\t  \t\t  {\r\n\t\t  \t\t    \"analyzer\": \"icu_analyzer\",\r\n\t\t  \t\t    \"text\": \"他说的确实在理”\"\r\n\t\t  \t\t  }\r\n\t\t  \t\t  \r\n\t\t  \t\t  \r\n\t\t  \t\t  POST _analyze\r\n\t\t  \t\t  {\r\n\t\t  \t\t    \"analyzer\": \"standard\",\r\n\t\t  \t\t    \"text\": \"他说的确实在理”\"\r\n\t\t  \t\t  }\r\n\t\t  \t\t  \r\n\t\t  \t\t  \r\n\t\t  \t\t  POST _analyze\r\n\t\t  \t\t  {\r\n\t\t  \t\t    \"analyzer\": \"icu_analyzer\",\r\n\t\t  \t\t    \"text\": \"这个苹果不大好吃\"\r\n\t\t  \t\t  }\r\n\t\t  ```\r\n- ### Search API\r\n\t- 指定索引\r\n\t  ![image-20220504214925983](https://cdn.jsdelivr.net/gh/GayHub1/images@master/img/image-20220504214925983.png){:height 324, :width 747}\r\n\t- #### URL Search\r\n\t  ![Replaced by Image Uploder](https://cdn.jsdelivr.net/gh/GayHub1/images@master/img/image-20220518233406287_1653743572042_0.png){:height 156, :width 747}\r\n\t- q:  指定查询语句，使用Query String Syntax\r\n\t- df: 默认字段，不指定时，会对所有字段进行查询\r\n\t- Sort 排序/from和size用于分页\r\n\t- Profile 可以查看查询是如何被执行的\r\n\t- ```\r\n\t  \t  指定字段\r\n\t  \t  GET /movies/_search?q=title:2012&sort=year:desc&from=0&size=10&timeout=1s\r\n\t  \t  {\r\n\t  \t  \t\"profile\":\"true\"\r\n\t  \t  }\r\n\t  ```\r\n\t- Term V.S Phrase\r\n\t\t- Beautiful Mind 等效于 Beautiful OR  Mind    title:(Beautiful AND Mind)\r\n\t\t- “Beautiful Mind”，等效于 Beautiful AND Mind。Phrase查询，还要求前后顺序保持一致 title=\"Beautiful Mind\"\r\n\t\t- ```\r\n\t\t  \t\t  # 查找美丽心灵, Mind为泛查询\r\n\t\t  \t\t  GET /movies/_search?q=title:Beautiful Mind\r\n\t\t  \t\t  {\r\n\t\t  \t\t  \t\"profile\":\"true\"\r\n\t\t  \t\t  }\r\n\t\t  \t\t  \r\n\t\t  \t\t  #使用引号，Phrase查询\r\n\t\t  \t\t  GET /movies/_search?q=title:\"Beautiful Mind\"\r\n\t\t  \t\t  {\r\n\t\t  \t\t  \t\"profile\":\"true\"\r\n\t\t  \t\t  }\r\n\t\t  \t\t  \r\n\t\t  \t\t  #分组，Bool查询\r\n\t\t  \t\t  GET /movies/_search?q=title:(Beautiful Mind)\r\n\t\t  \t\t  {\r\n\t\t  \t\t  \t\"profile\":\"true\"\r\n\t\t  \t\t  }\r\n\t\t  \t\t  \r\n\t\t  ```\r\n\t- 布尔操作\r\n\t\t- AND/OR/NOT或者&&/ll/!\r\n\t\t- 必须大写\r\n\t\t\t- title:(matrix NOT reloaded)\r\n\t\t- ```\r\n\t\t  \t\t  #布尔操作符\r\n\t\t  \t\t  # 查找美丽心灵\r\n\t\t  \t\t  GET /movies/_search?q=title:(Beautiful AND Mind)\r\n\t\t  \t\t  {\r\n\t\t  \t\t  \t\"profile\":\"true\"\r\n\t\t  \t\t  }\r\n\t\t  \t\t  \r\n\t\t  \t\t  # 查找美丽心灵\r\n\t\t  \t\t  GET /movies/_search?q=title:(Beautiful NOT Mind)\r\n\t\t  \t\t  {\r\n\t\t  \t\t  \t\"profile\":\"true\"\r\n\t\t  \t\t  }\r\n\t\t  \t\t  \r\n\t\t  ```\r\n\t- 分组\r\n\t\t- + 表示must\r\n\t\t- - 表示must_not\r\n\t\t- title:(+matrix -reloaded)\r\n\t\t- ```\r\n\t\t  \t\t  # 查找美丽心灵  %2B 代表+号\r\n\t\t  \t\t  GET /movies/_search?q=title:(Beautiful %2BMind)\r\n\t\t  \t\t  {\r\n\t\t  \t\t  \t\"profile\":\"true\"\r\n\t\t  \t\t  }\r\n\t\t  ```\r\n\t- 范围查询\r\n\t\t- 区间表示：[] 闭区间 ，{} 开区间\r\n\t\t\t- year:{2019 TO 2018}\r\n\t\t\t- year:[* TO 2018]\r\n\t\t\t- ```\r\n\t\t\t  \t\t\t  #范围查询 ,区间写法\r\n\t\t\t  \t\t\t  GET /movies/_search?q=title:beautiful AND year:[2002 TO 2018%7D\r\n\t\t\t  \t\t\t  {\r\n\t\t\t  \t\t\t  \t\"profile\":\"true\"\r\n\t\t\t  \t\t\t  }\r\n\t\t\t  \t\t\t  \r\n\t\t\t  ```\r\n\t- 算数符号\r\n\t\t- year:&gt;2010\r\n\t\t- year:(>2010 && &lt;=2018)\r\n\t\t- year:(+>2010 +<=2018)\r\n\t- 通配符查询（通配符查询效率低，占用内存大，不建议使用。特别是放在最前面）\r\n\t\t- ？代表1个字符，* 代表 0 或 多个字符\r\n\t\t\t- title:mi?d\r\n\t\t\t- title:be*\r\n\t\t- ```\r\n\t\t  \t\t  #通配符查询\r\n\t\t  \t\t  GET /movies/_search?q=title:b*\r\n\t\t  \t\t  {\r\n\t\t  \t\t  \t\"profile\":\"true\"\r\n\t\t  \t\t  }\r\n\t\t  ```\r\n\t- ·正则表达\r\n\t\t- title:[bt]oy\r\n\t- 模糊匹配与近似查询\r\n\t\t- title:befutifl~1\r\n\t\t- title:\"lord rings\"~2\r\n\t- ```\r\n\t  \t  //模糊匹配&近似度匹配\r\n\t  \t  GET /movies/_search?q=title:beautifl~1\r\n\t  \t  {\r\n\t  \t  \t\"profile\":\"true\"\r\n\t  \t  }\r\n\t  \t  \r\n\t  \t  GET /movies/_search?q=title:\"Lord Rings\"~2\r\n\t  \t  {\r\n\t  \t  \t\"profile\":\"true\"\r\n\t  \t  }\r\n\t  ```\r\n- ### Request Body Search\r\n\t- ![image-20220518232842975](https://cdn.jsdelivr.net/gh/GayHub1/images@master/img/image-20220518232842975.png)\r\n\t- **RESTAPI**\r\n\t- ```\r\n\t  \t  POST /kibana_sample_data_ecommerce/_search\r\n\t  \t  {\r\n\t  \t    \"from\":10,\r\n\t  \t    \"size\":20,\r\n\t  \t    \"sort\":[{\"order_date\":\"desc\"}],\r\n\t  \t    \"_source\":[\"order_date\"],\r\n\t  \t    \"query\":{\r\n\t  \t      \"match_all\": {}\r\n\t  \t    }\r\n\t  \t  }\r\n\t  \t  \r\n\t  \t  #脚本字段\r\n\t  \t  GET kibana_sample_data_ecommerce/_search\r\n\t  \t  {\r\n\t  \t    \"script_fields\": {\r\n\t  \t      \"new_field\": {\r\n\t  \t        \"script\": {\r\n\t  \t          \"lang\": \"painless\",\r\n\t  \t          \"source\": \"doc['order_date'].value+'hello'\"\r\n\t  \t        }\r\n\t  \t      }\r\n\t  \t    },\r\n\t  \t    \"query\": {\r\n\t  \t      \"match_all\": {}\r\n\t  \t    }\r\n\t  \t  }\r\n\t  \t  #Term查询 默认是有其中一个 OR关系\r\n\t  \t  POST movies/_search\r\n\t  \t  {\r\n\t  \t    \"query\": {\r\n\t  \t      \"match\": {\r\n\t  \t        \"title\": \"last christmas\"\r\n\t  \t      }\r\n\t  \t    }\r\n\t  \t  }\r\n\t  \t  \r\n\t  \t  # 两个都必须有\r\n\t  \t  POST movies/_search\r\n\t  \t  {\r\n\t  \t    \"query\": {\r\n\t  \t      \"match\": {\r\n\t  \t        \"title\": {\r\n\t  \t          \"query\": \"last christmas\",\r\n\t  \t          \"operator\": \"and\"\r\n\t  \t        }\r\n\t  \t      }\r\n\t  \t    }\r\n\t  \t  }\r\n\t  \t  #Phrase查询 slop：允许中间插入指定数量的Team\r\n\t  \t  POST movies/_search\r\n\t  \t  {\r\n\t  \t    \"query\": {\r\n\t  \t      \"match_phrase\": {\r\n\t  \t        \"title\":{\r\n\t  \t          \"query\": \"one love\",\r\n\t  \t          \"slop\": 1\r\n\t  \t  \r\n\t  \t        }\r\n\t  \t      }\r\n\t  \t    }\r\n\t  \t  }\r\n\t  ```\r\n\t-\r\n- ### QueryString&SimpleQueryString\r\n\t- ```\r\n\t  \t  POST users/_search\r\n\t  \t  {\r\n\t  \t    \"query\": {\r\n\t  \t      \"query_string\": {\r\n\t  \t        \"default_field\": \"name\",\r\n\t  \t        \"query\": \"Ruan AND Yiming\"\r\n\t  \t      }\r\n\t  \t    }\r\n\t  \t  }\r\n\t  \t  \r\n\t  \t  \r\n\t  \t  POST users/_search\r\n\t  \t  {\r\n\t  \t    \"query\": {\r\n\t  \t      \"query_string\": {\r\n\t  \t        \"fields\":[\"name\",\"about\"],\r\n\t  \t        \"query\": \"(Ruan AND Yiming) OR (Java AND Elasticsearch)\"\r\n\t  \t      }\r\n\t  \t    }\r\n\t  \t  }\r\n\t  \t  \r\n\t  \t  \r\n\t  \t  #Simple Query 默认的operator是 Or 不支持 AND 会被识别成字符串 用default_operator来指定AND\r\n\t  \t  POST users/_search\r\n\t  \t  {\r\n\t  \t    \"query\": {\r\n\t  \t      \"simple_query_string\": {\r\n\t  \t        \"query\": \"Ruan AND Yiming\",\r\n\t  \t        \"fields\": [\"name\"]\r\n\t  \t      }\r\n\t  \t    }\r\n\t  \t  }\r\n\t  \t  \r\n\t  \t  \r\n\t  \t  POST users/_search\r\n\t  \t  {\r\n\t  \t    \"query\": {\r\n\t  \t      \"simple_query_string\": {\r\n\t  \t        \"query\": \"Ruan Yiming\",\r\n\t  \t        \"fields\": [\"name\"],\r\n\t  \t        \"default_operator\": \"AND\"\r\n\t  \t      }\r\n\t  \t    }\r\n\t  \t  }\r\n\t  \t  \r\n\t  \t  \r\n\t  \t  GET /movies/_search\r\n\t  \t  {\r\n\t  \t  \t\"profile\": true,\r\n\t  \t  \t\"query\":{\r\n\t  \t  \t\t\"query_string\":{\r\n\t  \t  \t\t\t\"default_field\": \"title\",\r\n\t  \t  \t\t\t\"query\": \"Beafiful AND Mind\"\r\n\t  \t  \t\t}\r\n\t  \t  \t}\r\n\t  \t  }\r\n\t  \t  \r\n\t  \t  \r\n\t  \t  # 多fields\r\n\t  \t  GET /movies/_search\r\n\t  \t  {\r\n\t  \t  \t\"profile\": true,\r\n\t  \t  \t\"query\":{\r\n\t  \t  \t\t\"query_string\":{\r\n\t  \t  \t\t\t\"fields\":[\r\n\t  \t  \t\t\t\t\"title\",\r\n\t  \t  \t\t\t\t\"year\"\r\n\t  \t  \t\t\t],\r\n\t  \t  \t\t\t\"query\": \"2012\"\r\n\t  \t  \t\t}\r\n\t  \t  \t}\r\n\t  \t  }\r\n\t  \t  \r\n\t  \t  \r\n\t  \t  \r\n\t  \t  GET /movies/_search\r\n\t  \t  {\r\n\t  \t  \t\"profile\":true,\r\n\t  \t  \t\"query\":{\r\n\t  \t  \t\t\"simple_query_string\":{\r\n\t  \t  \t\t\t\"query\":\"Beautiful +mind\",\r\n\t  \t  \t\t\t\"fields\":[\"title\"]\r\n\t  \t  \t\t}\r\n\t  \t  \t}\r\n\t  \t  }\t\r\n\t  ```\r\n\t- ### Mapping\r\n\t\t- 定义\r\n\t\t\t- Mapping类似数据库中的schema的定义，作用如下\r\n\t\t\t  \t\t\t\t* 定义索引中的字段的名称\r\n\t\t\t  \t\t\t\t* 定义字段的数据类型，例如字符串，数字，布尔......\r\n\t\t\t  \t\t\t\t* 字段，倒排索引的相关配置，(Analyzed or Not Analyzed,Analyzer)\r\n\t\t\t- Mapping会把JSON文档映射成Lucene所需要的扁平格式\r\n\t\t\t- 一个Mapping属于一个索引的Type\r\n\t\t\t- 每个文档都属于一个Type\r\n\t\t\t  \t\t\t\t* 一个Type有一个Mapping定义\r\n\t\t\t  \t\t\t\t* 7.0开始，不需要在Mapping定义中指定type信息\r\n\t\t- 数据类型\r\n\t\t\t- 简单类型\r\n\t\t\t  \t\t\t\t* Text/Keyword\r\n\t\t\t  \t\t\t\t* Date\r\n\t\t\t  \t\t\t\t* Integer / Floating\r\n\t\t\t  \t\t\t\t* Boolean\r\n\t\t\t  \t\t\t\t* Pv4&IPv6\r\n\t\t\t- 复杂类型-对象和嵌套对象\r\n\t\t\t  \t\t\t\t* 对象类型/嵌套类型\r\n\t\t\t- 特殊类型\r\n\t\t\t  \t\t\t\t* geo_point &  geo_shape/percolator\r\n\t\t- Dynamic Mapping\r\n\t\t\t- 在写入文档时候，如果索引不存在，\r\n\t\t\t  会自动创建索引\r\n\t\t\t- Dynamic Mapping的机制，使得\r\n\t\t\t  我们无需手动定义Mappings。\r\n\t\t\t  Elasticsearch 会自动根据文档信\r\n\t\t\t  息（JSON类型），推算出字段的类型\r\n\t\t- 能否修改Mapping字段类型(倒排索引有无建立，建立了就只能reindex 才能被索引)\r\n\t\t\t- 新增加字段\r\n\t\t\t  \t\t\t\t* Dynamic设为true时，一旦有新增字段的文档写入，Mapping也同时被\r\n\t\t\t   更新\r\n\t\t\t  \t\t\t\t* Dynamic设为false,Mapping不会被更新，新增字段的数据无法被索引，\r\n\t\t\t   但是信息会出现在_source中返回到标签页\r\n\t\t\t  \t\t\t\t* Dynamic设置成Strict,文档写入失败\r\n\t\t\t- 对已有字段，一旦已经有数据写入，就不再支持修改字段定义\r\n\t\t\t\t- Lucene实现的倒排索引，一旦生成后，就不允许修改\r\n\t\t\t- 如果希望改变字段类型，必须ReindexAPI,重建索引\r\n\t\t\t\t- 原因\r\n\t\t\t\t  \t\t\t\t\t* 如果修改了字段的数据类型，会导致已被索引的属于无法被搜索\r\n\t\t\t\t  \t\t\t\t\t* 但是如果是增加新的字段，就不会有这样的影响\r\n\t\t- 当dynamic被设置成false时候，存在新增字段的数据写入，该数据可以被索引，但是新增字段被丢弃\r\n\t\t- 当设置成 Strict模式时候，数据写入直接出错\r\n\t\t- **Index** ： 控制当前字段是否被索引。默认为true。如果设置成 false,该字段不可被搜索\r\n\t\t- Index Options\r\n\t\t\t- 四种不同级别的Index Options配置，可以控制倒排索引记录的内容\r\n\t\t\t  \t\t\t\t* docs 记录doc id\r\n\t\t\t  \t\t\t\t* freqs 记录 doc id 和 term frequencies\r\n\t\t\t  \t\t\t\t* positions 记录doc id/term frequencies/term position\r\n\t\t\t  \t\t\t\t* offsets  记录docid/termfrequencies/termposistion/characteroffects\r\n\t\t\t- Text类型默认记录**postions**,其他默认为**docs**\r\n\t\t\t- 记录内容越多，占用存储空间越大\r\n\t\t- null_Value : 对空值赋一个空值对应属性，使得可以被搜索\r\n\t\t- copy_to\r\n\t\t  \t\t\t* copy_to将字段的数值拷贝到目标字段，实现类似_all的作用\r\n\t\t  \t\t\t* copy_to的目标字段不出现在_source中\r\n\t\t- Elasticsearch中不提供专门的数组类型。但是任何字段，都可以包含多个相同类类型的数值\r\n\t\t- 多字段特性\r\n\t\t  \t\t\t* 使用不同的**analyzer**\r\n\t\t- Excat values V.S Full Text\r\n\t\t\t- Exact Value:包括数字/日期/具体一个字符串（例如“Apple Stare\")\r\n\t\t\t\t- Elasticseach 中的 keyword\r\n\t\t\t\t  \t\t\t\t\t* 不做特殊的分词处理\r\n\t\t\t\t  \t\t\t\t\t* 字段与索引一一对应\r\n\t\t- 全文本，非结构化的文本数据\r\n\t\t  \t\t\t* （Elasticsearch 中的 text）\r\n\t- ### IndexTemplate和DynamicTemplate\r\n\t\t- IndexTemplate\r\n\t\t\t- Index Templates - 帮助你设定 Mappings 和 Settings,并按照一定的规则，自动匹配到新创建的索引之上\r\n\t\t\t  \t\t\t\t* 模版仅在一个索引被新创建时，才会产生作用。修改模版不会影响已创建的索引\r\n\t\t\t  \t\t\t\t* 你可以设定多个索引模版，这些设置会被“merge”在一起\r\n\t\t\t  \t\t\t\t* 你可以指定“order”的数值，控制“merging”的过程\r\n\t\t\t- 当一个索引被新创建时\r\n\t\t\t  \t\t\t\t* 应用Elasticsearch默认的settings和mappings\r\n\t\t\t  \t\t\t\t* 应用order数值低的IndexTemplate中的设定\r\n\t\t\t  \t\t\t\t* 应用order高的IndexTemplate中的设定，之前的设定会被覆盖\r\n\t\t\t  \t\t\t\t* 应用创建索引时，用户所指定的Settings和Mappings,并覆盖之前模版中的设定\r\n\t\t\t- **RESTAPI**\r\n\t\t\t\t- ```\r\n\t\t\t\t  \t\t\t\t  PUT /_template/template_test\r\n\t\t\t\t  \t\t\t\t  {\r\n\t\t\t\t  \t\t\t\t      \"index_patterns\" : [\"test*\"],\r\n\t\t\t\t  \t\t\t\t      \"order\" : 1,\r\n\t\t\t\t  \t\t\t\t      \"settings\" : {\r\n\t\t\t\t  \t\t\t\t      \t\"number_of_shards\": 1,\r\n\t\t\t\t  \t\t\t\t          \"number_of_replicas\" : 2\r\n\t\t\t\t  \t\t\t\t      },\r\n\t\t\t\t  \t\t\t\t      \"mappings\" : {\r\n\t\t\t\t  \t\t\t\t      \t\"date_detection\": false,\r\n\t\t\t\t  \t\t\t\t      \t\"numeric_detection\": true\r\n\t\t\t\t  \t\t\t\t      }\r\n\t\t\t\t  \t\t\t\t  }\r\n\t\t\t\t  \t\t\t\t  GET testtemplate/_mapping\r\n\t\t\t\t  \t\t\t\t  get testtemplate/_settings\r\n\t\t\t\t  \t\t\t\t  PUT testmy\r\n\t\t\t\t  \t\t\t\t  {\r\n\t\t\t\t  \t\t\t\t  \t\"settings\":{\r\n\t\t\t\t  \t\t\t\t  \t\t\"number_of_replicas\":5\r\n\t\t\t\t  \t\t\t\t  \t}\r\n\t\t\t\t  \t\t\t\t  }\r\n\t\t\t\t  ```\r\n\t\t- DynamicTemplate\r\n\t\t\t- 根据 Elasticsearch识别的数据类型，结合字段名称，来动态设定字段类型\r\n\t\t\t  \t\t\t\t* *所有的字符串类型都设定成Keyword,或者关闭keyword字段\r\n\t\t\t  \t\t\t\t* is开头的字段都设置成 boolean\r\n\t\t\t  \t\t\t\t* long_开头的都设置成long类型\r\n\t\t- ```\r\n\t\t  \t\t  PUT my_index\r\n\t\t  \t\t  {\r\n\t\t  \t\t    \"mappings\": {\r\n\t\t  \t\t      \"dynamic_templates\": [\r\n\t\t  \t\t              {\r\n\t\t  \t\t          \"strings_as_boolean\": {\r\n\t\t  \t\t            \"match_mapping_type\":   \"string\",\r\n\t\t  \t\t            \"match\":\"is*\",\r\n\t\t  \t\t            \"mapping\": {\r\n\t\t  \t\t              \"type\": \"boolean\"\r\n\t\t  \t\t            }\r\n\t\t  \t\t          }\r\n\t\t  \t\t        },\r\n\t\t  \t\t        {\r\n\t\t  \t\t          \"strings_as_keywords\": {\r\n\t\t  \t\t            \"match_mapping_type\":   \"string\",\r\n\t\t  \t\t            \"mapping\": {\r\n\t\t  \t\t              \"type\": \"keyword\"\r\n\t\t  \t\t            }\r\n\t\t  \t\t          }\r\n\t\t  \t\t        }\r\n\t\t  \t\t      ]\r\n\t\t  \t\t    }\r\n\t\t  \t\t  }\r\n\t\t  ```\r\n\t\t  \t\t\t* Dynamic Tempate 是定义在在某个索引的 Mapping 中\r\n\t\t  \t\t\t* Template有一个名称\r\n\t\t  \t\t\t* 匹配规则是一个数组\r\n\t\t  \t\t\t* 为匹配到字段设置 Mapping\r\n\t\t- **RESTAPI**\r\n\t\t- ```\r\n\t\t  \t\t  PUT my_index\r\n\t\t  \t\t  {\r\n\t\t  \t\t    \"mappings\": {\r\n\t\t  \t\t      \"dynamic_templates\": [\r\n\t\t  \t\t        {\r\n\t\t  \t\t          \"full_name\": {\r\n\t\t  \t\t            \"path_match\":   \"name.*\",\r\n\t\t  \t\t            \"path_unmatch\": \"*.middle\",\r\n\t\t  \t\t            \"mapping\": {\r\n\t\t  \t\t              \"type\":       \"text\",\r\n\t\t  \t\t              \"copy_to\":    \"full_name\"\r\n\t\t  \t\t            }\r\n\t\t  \t\t          }\r\n\t\t  \t\t        }\r\n\t\t  \t\t      ]\r\n\t\t  \t\t    }\r\n\t\t  \t\t  }\r\n\t\t  \t\t  \r\n\t\t  \t\t  PUT my_index/_doc/1\r\n\t\t  \t\t  {\r\n\t\t  \t\t    \"name\": {\r\n\t\t  \t\t      \"first\":  \"John\",\r\n\t\t  \t\t      \"middle\": \"Winston\",\r\n\t\t  \t\t      \"last\":   \"Lennon\"\r\n\t\t  \t\t    }\r\n\t\t  \t\t  }\r\n\t\t  \t\t  \r\n\t\t  \t\t  GET my_index/_search?q=full_name:John\r\n\t\t  \t\t  get my_index/_settings\r\n\t\t  \t\t  get my_index/_mapping\r\n\t\t  ```\r\n\t- **Aggregation**\r\n\t\t- Elasticsearch除搜索以外，提供的针对ES数据进行统计分析的功能\r\n\t\t  \t\t\t* 实时性高\r\n\t\t  \t\t\t* 而Hadoop需要 (T+1)\r\n\t\t- 通过聚合，我们会得到一个数据的概览，是分析和总结全套的数据，而不是寻找单个文档\r\n\t\t- 高性能，只需要一条语句，就可以从 Elasticsearch得到分析结果，无需在客户端自己去实现分析逻辑\r\n\t\t- 分类\r\n\t\t\t- Bucket Aggregation\r\n\t\t\t\t- 一些列满足特定条件的文档的集合\r\n\t\t\t- Metric Aggregation\r\n\t\t\t\t- 一些数学运算，可以对文档字段进行统计分析\r\n\t\t\t\t- Metric 会基于数据集计算结果，除了支持在字段上进行计算，同样也支持在脚本\r\n\t\t\t\t  (painless script)产生的结果之上进行计算\r\n\t\t\t\t- 大多数 Metric 是数学计算，仅输出一个值\r\n\t\t\t\t  \t\t\t\t\t* min/max/sum/avg/cardinality\r\n\t\t\t\t- 部分metric支持输出多个数值\r\n\t\t\t\t  \t\t\t\t\t* stats/percentiles/percentile_ranks\r\n\t\t\t- Pipeline Aggregation\r\n\t\t\t\t- 对其他的聚合结果进行二次聚合\r\n\t\t\t- Matrix Aggregration\r\n\t\t\t\t- 支持对多个字段的操作并提供一个结果矩阵\r\n\t\t- **RESTAPI**\r\n\t\t\t- ```\r\n\t\t\t  \t\t\t  #按照目的地进行分桶统计\r\n\t\t\t  \t\t\t  GET kibana_sample_data_flights/_search\r\n\t\t\t  \t\t\t  {\r\n\t\t\t  \t\t\t  \t\"size\": 0,\r\n\t\t\t  \t\t\t  \t\"aggs\":{\r\n\t\t\t  \t\t\t  \t\t\"flight_dest\":{\r\n\t\t\t  \t\t\t  \t\t\t\"terms\":{\r\n\t\t\t  \t\t\t  \t\t\t\t\"field\":\"DestCountry\"\r\n\t\t\t  \t\t\t  \t\t\t}\r\n\t\t\t  \t\t\t  \t\t}\r\n\t\t\t  \t\t\t  \t}\r\n\t\t\t  \t\t\t  }\r\n\t\t\t  \t\t\t  \r\n\t\t\t  \t\t\t  \r\n\t\t\t  \t\t\t  \r\n\t\t\t  \t\t\t  #查看航班目的地的统计信息，增加平均，最高最低价格\r\n\t\t\t  \t\t\t  GET kibana_sample_data_flights/_search\r\n\t\t\t  \t\t\t  {\r\n\t\t\t  \t\t\t  \t\"size\": 0,\r\n\t\t\t  \t\t\t  \t\"aggs\":{\r\n\t\t\t  \t\t\t  \t\t\"flight_dest\":{\r\n\t\t\t  \t\t\t  \t\t\t\"terms\":{\r\n\t\t\t  \t\t\t  \t\t\t\t\"field\":\"DestCountry\"\r\n\t\t\t  \t\t\t  \t\t\t},\r\n\t\t\t  \t\t\t  \t\t\t\"aggs\":{\r\n\t\t\t  \t\t\t  \t\t\t\t\"avg_price\":{\r\n\t\t\t  \t\t\t  \t\t\t\t\t\"avg\":{\r\n\t\t\t  \t\t\t  \t\t\t\t\t\t\"field\":\"AvgTicketPrice\"\r\n\t\t\t  \t\t\t  \t\t\t\t\t}\r\n\t\t\t  \t\t\t  \t\t\t\t},\r\n\t\t\t  \t\t\t  \t\t\t\t\"max_price\":{\r\n\t\t\t  \t\t\t  \t\t\t\t\t\"max\":{\r\n\t\t\t  \t\t\t  \t\t\t\t\t\t\"field\":\"AvgTicketPrice\"\r\n\t\t\t  \t\t\t  \t\t\t\t\t}\r\n\t\t\t  \t\t\t  \t\t\t\t},\r\n\t\t\t  \t\t\t  \t\t\t\t\"min_price\":{\r\n\t\t\t  \t\t\t  \t\t\t\t\t\"min\":{\r\n\t\t\t  \t\t\t  \t\t\t\t\t\t\"field\":\"AvgTicketPrice\"\r\n\t\t\t  \t\t\t  \t\t\t\t\t}\r\n\t\t\t  \t\t\t  \t\t\t\t}\r\n\t\t\t  \t\t\t  \t\t\t}\r\n\t\t\t  \t\t\t  \t\t}\r\n\t\t\t  \t\t\t  \t}\r\n\t\t\t  \t\t\t  }\r\n\t\t\t  \t\t\t  \r\n\t\t\t  \t\t\t  \r\n\t\t\t  \t\t\t  \r\n\t\t\t  \t\t\t  #价格统计信息+天气信息\r\n\t\t\t  \t\t\t  GET kibana_sample_data_flights/_search\r\n\t\t\t  \t\t\t  {\r\n\t\t\t  \t\t\t  \t\"size\": 0,\r\n\t\t\t  \t\t\t  \t\"aggs\":{\r\n\t\t\t  \t\t\t  \t\t\"flight_dest\":{\r\n\t\t\t  \t\t\t  \t\t\t\"terms\":{\r\n\t\t\t  \t\t\t  \t\t\t\t\"field\":\"DestCountry\"\r\n\t\t\t  \t\t\t  \t\t\t},\r\n\t\t\t  \t\t\t  \t\t\t\"aggs\":{\r\n\t\t\t  \t\t\t  \t\t\t\t\"stats_price\":{\r\n\t\t\t  \t\t\t  \t\t\t\t\t\"stats\":{\r\n\t\t\t  \t\t\t  \t\t\t\t\t\t\"field\":\"AvgTicketPrice\"\r\n\t\t\t  \t\t\t  \t\t\t\t\t}\r\n\t\t\t  \t\t\t  \t\t\t\t},\r\n\t\t\t  \t\t\t  \t\t\t\t\"wather\":{\r\n\t\t\t  \t\t\t  \t\t\t\t  \"terms\": {\r\n\t\t\t  \t\t\t  \t\t\t\t    \"field\": \"DestWeather\",\r\n\t\t\t  \t\t\t  \t\t\t\t    \"size\": 5\r\n\t\t\t  \t\t\t  \t\t\t\t  }\r\n\t\t\t  \t\t\t  \t\t\t\t}\r\n\t\t\t  \t\t\t  \r\n\t\t\t  \t\t\t  \t\t\t}\r\n\t\t\t  \t\t\t  \t\t}\r\n\t\t\t  \t\t\t  \t}\r\n\t\t\t  \t\t\t  }\r\n\t\t\t  \t\t\t  \r\n\t\t\t  \t\t\t  \r\n\t\t\t  ```
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pages/Elasticsearch 安装与入门.md b/pages/Elasticsearch 安装与入门.md
--- a/pages/Elasticsearch 安装与入门.md	(revision e621301d31a61b678599113ad4a425f9bbbdef35)
+++ b/pages/Elasticsearch 安装与入门.md	(date 1654788330534)
@@ -3,6 +3,7 @@
 	- [[ELK docker-compose 安装]]
 	- [[报错]]
 - ### 安装与查看插件
+  collapsed:: true
 	- 查看插件
 	  ```
 	  	  .\bin\elasticsearch-plugin list
@@ -13,6 +14,7 @@
 	  ```
 	- Kibana 相关插件 https://www.elastic.co/guide/en/kibana/current/known-plugins.html
 - ## 基本概念
+  collapsed:: true
 	- 与关系型数据库简单对比
 	  
 	  | RDBMS | Elasticsearch |
@@ -23,6 +25,7 @@
 	  | Schema | Mapping |
 	  | SQL | DSL |
 - ### 文档
+  collapsed:: true
 	- Elasticsearch 是面向文档的，文档是所有可搜索数据的最小单位
 	- 文档会被序列化成JSON格式，保存在Elasticsearch中
 	- 每个文档都有一个Unique ID
@@ -107,6 +110,7 @@
 		-
 	-
 - ### 索引
+  collapsed:: true
 	- Index - 索引是文档的容器，是一类文档的结合
 		- Index体现了逻辑空间的概念：每个索引都有自己的Mapping定义，用于定义包含的文档的字段名和字段类型
 		- Shard体现了物理空间的概念：索引中的数据分散在Shard上
@@ -127,6 +131,7 @@
 		- 索引具体内容使用情况
 		  GET /_cat/indices?v&h=i,tm&s=tm:desc
 - ### 节点
+  collapsed:: true
 	- #### Master-eligible nodes 和 Master Node
 		- 每个节点启动后，默认就是一个Master eligible节点
 			- 可以设置node.master:false禁止
@@ -167,6 +172,7 @@
 	-
 	-
 - ### 集群
+  collapsed:: true
   :logbook:
   CLOCK: [2022-05-28 Sat 21:28:06]--[2022-05-28 Sat 21:28:07] =>  00:00:01
   :END:
@@ -184,6 +190,7 @@
 		- ![image.png](../assets/image_1653748056183_0.png)
 	-
 - ### 分片
+  collapsed:: true
 	- 主分片(Primary Shard )，用以解决数据水平扩展的问题。通过主分片，可以将数据分布到集群内的所有节点之上
 		- 一个分片是一个运行的Lucene的实例
 		- 主分片数在索引创建时指定，后续不允许修改，除非Reindex
@@ -204,6 +211,7 @@
 	  ```
 	-
 - ### 倒排索引
+  collapsed:: true
 	- 单词词典（Term Dictionary),记录所有文档的单词，记录单词到倒排列表的关联关系
 		- 单词词典一般比较大，可以通过B+树或哈希拉链法实现，以满足高性能的插入与查询
 	- 倒排列表（Posting List)-记录了单词对应的文档结合，由倒排索引项组成
@@ -223,6 +231,7 @@
 		  ```
 		-
 - ### 分词器
+  collapsed:: true
 	- 常见分词器
 	  
 	  | 名称 | 作用 |
@@ -339,6 +348,7 @@
 		  		  }
 		  ```
 - ### Search API
+  collapsed:: true
 	- 指定索引
 	  ![image-20220504214925983](https://cdn.jsdelivr.net/gh/GayHub1/images@master/img/image-20220504214925983.png){:height 324, :width 747}
 	- #### URL Search
@@ -452,6 +462,7 @@
 	  	  }
 	  ```
 - ### Request Body Search
+  collapsed:: true
 	- ![image-20220518232842975](https://cdn.jsdelivr.net/gh/GayHub1/images@master/img/image-20220518232842975.png)
 	- **RESTAPI**
 	- ```
